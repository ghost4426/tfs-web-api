// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(FoodTrackingDbContext))]
    [Migration("20190706105727_giantt-v1")]
    partial class gianttv1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DTO.Entities.Category", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DTO.Entities.DistributorFood", b =>
                {
                    b.Property<int>("FoodId");

                    b.Property<int>("PremisesId");

                    b.HasKey("FoodId", "PremisesId");

                    b.HasIndex("PremisesId");

                    b.ToTable("DistributorFood");
                });

            modelBuilder.Entity("DTO.Entities.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Breed");

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("FarmId");

                    b.Property<bool>("IsCertification")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFeeding")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPackaging")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTreatment")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVaccination")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("ProviderId");

                    b.Property<int?>("TreatmentId");

                    b.HasKey("FoodId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FarmId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("DTO.Entities.FoodDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockNumber");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("FoodId");

                    b.Property<string>("TransactionHash");

                    b.Property<int>("TypeId");

                    b.HasKey("DetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FoodId");

                    b.HasIndex("TypeId");

                    b.ToTable("FoodDetail");
                });

            modelBuilder.Entity("DTO.Entities.FoodDetailType", b =>
                {
                    b.Property<int>("TypeId");

                    b.Property<string>("Name");

                    b.HasKey("TypeId");

                    b.ToTable("FoodDetailType");
                });

            modelBuilder.Entity("DTO.Entities.Premises", b =>
                {
                    b.Property<int>("PremisesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.Property<int>("TypeId");

                    b.HasKey("PremisesId");

                    b.HasIndex("TypeId");

                    b.ToTable("Premises");
                });

            modelBuilder.Entity("DTO.Entities.PremisesType", b =>
                {
                    b.Property<int>("TypeId");

                    b.Property<string>("Name");

                    b.HasKey("TypeId");

                    b.ToTable("PremisesType");
                });

            modelBuilder.Entity("DTO.Entities.Role", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<string>("Name");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DTO.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmDate");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("FarmId");

                    b.Property<int>("FoodId");

                    b.Property<int>("ProviderId");

                    b.Property<int>("StatusId");

                    b.HasKey("TransactionId");

                    b.HasIndex("FarmId");

                    b.HasIndex("FoodId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("DTO.Entities.TransactionStatus", b =>
                {
                    b.Property<int>("StatusId");

                    b.Property<string>("Status");

                    b.HasKey("StatusId");

                    b.ToTable("TransactionStatus");
                });

            modelBuilder.Entity("DTO.Entities.Treatment", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("PremisesId");

                    b.Property<int?>("TreatmentParentId");

                    b.HasKey("TreatmentId");

                    b.HasIndex("PremisesId");

                    b.HasIndex("TreatmentParentId");

                    b.ToTable("Treatment");
                });

            modelBuilder.Entity("DTO.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("Fullname");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNo");

                    b.Property<int>("PremisesId");

                    b.Property<int>("RoleId");

                    b.Property<string>("Salt");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.HasIndex("PremisesId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DTO.Entities.DistributorFood", b =>
                {
                    b.HasOne("DTO.Entities.Food", "Food")
                        .WithMany("DistributorFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTO.Entities.Premises", "Premises")
                        .WithMany("DistributorFoods")
                        .HasForeignKey("PremisesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DTO.Entities.Food", b =>
                {
                    b.HasOne("DTO.Entities.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTO.Entities.Premises", "Farm")
                        .WithMany("FarmFoods")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DTO.Entities.Premises", "Provider")
                        .WithMany("ProviderFoods")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DTO.Entities.Treatment", "Treatment")
                        .WithMany("Foods")
                        .HasForeignKey("TreatmentId");
                });

            modelBuilder.Entity("DTO.Entities.FoodDetail", b =>
                {
                    b.HasOne("DTO.Entities.User", "CreatedBy")
                        .WithMany("UserCreatedFoodDetails")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTO.Entities.Food", "Food")
                        .WithMany("FoodDetails")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTO.Entities.FoodDetailType", "Type")
                        .WithMany("FoodDetails")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DTO.Entities.Premises", b =>
                {
                    b.HasOne("DTO.Entities.PremisesType", "PremisesType")
                        .WithMany("Premises")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DTO.Entities.Transaction", b =>
                {
                    b.HasOne("DTO.Entities.Premises", "Farm")
                        .WithMany("FarmTransactions")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DTO.Entities.Food", "Food")
                        .WithMany("Transactions")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTO.Entities.Premises", "Provider")
                        .WithMany("ProviderTransactions")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DTO.Entities.TransactionStatus", "TransactionStatus")
                        .WithMany("Transactions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DTO.Entities.Treatment", b =>
                {
                    b.HasOne("DTO.Entities.Premises", "Premises")
                        .WithMany()
                        .HasForeignKey("PremisesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTO.Entities.Treatment", "TreatmentParent")
                        .WithMany("Treatments")
                        .HasForeignKey("TreatmentParentId");
                });

            modelBuilder.Entity("DTO.Entities.User", b =>
                {
                    b.HasOne("DTO.Entities.Premises", "Premises")
                        .WithMany("Users")
                        .HasForeignKey("PremisesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTO.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
